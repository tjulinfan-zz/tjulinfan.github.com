<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: LeetCode | 森林木]]></title>
  <link href="http://tjulinfan.github.io/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://tjulinfan.github.io/"/>
  <updated>2014-06-03T21:39:12+08:00</updated>
  <id>http://tjulinfan.github.io/</id>
  <author>
    <name><![CDATA[tjulinfan]]></name>
    <email><![CDATA[tjulinfan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[LeetCode] Linked List Cycle]]></title>
    <link href="http://tjulinfan.github.io/blog/2014/06/03/leetcode-linked-list-cycle/"/>
    <updated>2014-06-03T21:38:16+08:00</updated>
    <id>http://tjulinfan.github.io/blog/2014/06/03/leetcode-linked-list-cycle</id>
    <content type="html"><![CDATA[<h3><a href="https://oj.leetcode.com/problems/linked-list-cycle/">[LeetCode] Linked List Cycle</a></h3>

<h4>题意</h4>

<p>判断一个单向链表中是否有环，要求利用额外的常数空间。</p>

<h4>解法</h4>

<p>设两个指针变量一开始都指向链表的头结点，其中一个每次走一步（p1），另一个每次走两步（p2），如果两个指针再次相遇则说明有环。</p>

<p>个人的想法是这样的：假设p1从头结点走到环开始的地方要a步，在环内与p2相遇时走了b步，同时环的大小是k，那么显然：</p>

<p>[2(a + b) &ndash; a] % k ≡ b % k</p>

<p>那么 (a + b) % k ≡ 0
这个证明可以在O(k)的时间内出解</p>

<h4>代码</h4>

<p><a href="https://github.com/tjulinfan/LeetCode/blob/master/Linked%20List%20Cycle.cpp">见GitHub</a></p>

<pre><code>/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {

        ListNode *p1 = head, *p2 = head;
        do {
            if (p1 == NULL || p2 == NULL || p2 -&gt; next == NULL) return false;
            p1 = p1 -&gt; next;
            p2 = p2 -&gt; next -&gt; next;
        } while (p1 != p2);
        return true;
    }
};
</code></pre>
]]></content>
  </entry>
  
</feed>
